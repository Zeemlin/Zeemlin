// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zeemlin.Data.DbContexts;

#nullable disable

namespace Zeemlin.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.EventAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("EventAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.HomeworkAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("HomeworkId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HomeworkId");

                    b.ToTable("HomeworkAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.QuestionAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAssets");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.SchoolAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.SchoolLogoAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId")
                        .IsUnique();

                    b.ToTable("SchoolLogoAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.StudentAward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAwards");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.TeacherAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.ToTable("TeacherAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.TeacherAward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherAwards");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.VideoLessonAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("VideoLessonAssets", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9141),
                            Description = "A comprehensive course covering all aspects of the English language.",
                            Name = "English Language Course",
                            SchoolId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 48651
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9147),
                            Description = "A course focusing on various aspects of computer science and programming.",
                            Name = "Computer Science Course",
                            SchoolId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 74586
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9150),
                            Description = "A course covering photography techniques, equipment, and artistic aspects.",
                            Name = "Photography Course",
                            SchoolId = 8L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 48651
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9152),
                            Description = "A comprehensive course covering various mathematical concepts and techniques.",
                            Name = "Mathematics Course",
                            SchoolId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 48651
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9154),
                            Description = "A course exploring the history and development of art from different periods and cultures.",
                            Name = "Art History Course",
                            SchoolId = 4L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 54861
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9157),
                            Description = "A course covering fundamental principles of physics and their practical applications.",
                            Name = "Physics Course",
                            SchoolId = 5L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 48651
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9159),
                            Description = "A course exploring music theory, notation, composition, and performance.",
                            Name = "Music Theory Course",
                            SchoolId = 6L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 10000
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9161),
                            Description = "A course covering the principles of chemistry, including atomic structure, chemical reactions, and bonding.",
                            Name = "Chemistry Course",
                            SchoolId = 7L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 10000
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9163),
                            Description = "A course studying the Earth's landscapes, environments, and human geography.",
                            Name = "Geography Course",
                            SchoolId = 8L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 153889
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9166),
                            Description = "A course focusing on the French language, covering vocabulary, grammar, and conversation.",
                            Name = "French Language Course",
                            SchoolId = 9L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 485325
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9168),
                            Description = "A course covering algebraic concepts and techniques, including equations, functions, and polynomials.",
                            Name = "Algebra Course",
                            SchoolId = 10L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 489615
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9170),
                            Description = "A course exploring the principles of biology, including cell biology, genetics, and ecology.",
                            Name = "Biology Course",
                            SchoolId = 11L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 98465
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9172),
                            Description = "A course focusing on the Russian language, covering vocabulary, grammar, and conversation.",
                            Name = "Russian Language Course",
                            SchoolId = 12L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 84650
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9174),
                            Description = "A course exploring classic and contemporary works of English literature.",
                            Name = "English Literature Course",
                            SchoolId = 13L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 10000
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9176),
                            Description = "A course examining the history and development of art from different cultures and periods.",
                            Name = "History of Art Course",
                            SchoolId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 10000
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9178),
                            Description = "A course covering fundamental concepts of computer science, programming, and algorithms.",
                            Name = "Computer Science Course",
                            SchoolId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 10000
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9180),
                            Description = "A course studying the Earth's structure, rocks, minerals, and geological processes.",
                            Name = "Geology Course",
                            SchoolId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 78245
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9189),
                            Description = "A course focusing on IT concepts, including hardware, software, networks, and cybersecurity.",
                            Name = "Information Technology Course",
                            SchoolId = 4L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 40978
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9191),
                            Description = "A course covering principles and techniques of chemical engineering, including unit operations and process design.",
                            Name = "Chemical Engineering Course",
                            SchoolId = 5L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 48740
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9193),
                            Description = "A course focusing on physical fitness, sports, and exercise physiology.",
                            Name = "Physical Education Course",
                            SchoolId = 6L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 48658
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9195),
                            Description = "A course exploring advanced concepts in algebraic geometry, including varieties and schemes.",
                            Name = "Algebraic Geometry Course",
                            SchoolId = 7L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 755407
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9197),
                            Description = "A course studying the Earth's environment, ecosystems, and human impact on nature.",
                            Name = "Environmental Science Course",
                            SchoolId = 8L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 4150
                        },
                        new
                        {
                            Id = 23L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9199),
                            Description = "A course exploring the art and techniques of French cuisine, including cooking methods and recipes.",
                            Name = "French Cuisine Course",
                            SchoolId = 9L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 4568
                        },
                        new
                        {
                            Id = 24L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9201),
                            Description = "A course exploring the art and techniques of French cuisine, including cooking methods and recipes.",
                            Name = "Course",
                            SchoolId = 9L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 86000
                        },
                        new
                        {
                            Id = 25L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9203),
                            Description = "A course exploring the art and techniques of French cuisine, including cooking methods and recipes.",
                            Name = "Course",
                            SchoolId = 10L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            price = 1000
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Events.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("EventAssetId")
                        .HasColumnType("bigint");

                    b.Property<byte>("EventType")
                        .HasColumnType("smallint");

                    b.Property<short>("Format")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OfficialPage")
                        .HasColumnType("text");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("UpdaterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Events.EventRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RegistrationCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRegistrations", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AssessmentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Groups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9340),
                            Description = "A group for beginner English language learners.",
                            Name = "Beginner English Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9344),
                            Description = "A group focusing on Java programming language and application development.",
                            Name = "Java Programming Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9346),
                            Description = "A group for beginners learning basic photography techniques.",
                            Name = "Basic Photography Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CourseId = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9349),
                            Description = "A group for intermediate level mathematics students.",
                            Name = "Intermediate Mathematics Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CourseId = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9351),
                            Description = "A group studying Renaissance art and its influences.",
                            Name = "Renaissance Art Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CourseId = 6L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9354),
                            Description = "A group focusing on advanced topics in physics and theoretical physics.",
                            Name = "Advanced Physics Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CourseId = 7L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9356),
                            Description = "A group focusing on learning to play musical instruments and ensemble performance.",
                            Name = "Instrumental Music Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            CourseId = 8L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9358),
                            Description = "A group studying organic chemistry and its applications in industry and research.",
                            Name = "Organic Chemistry Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            CourseId = 9L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9360),
                            Description = "A group exploring environmental issues and sustainability.",
                            Name = "Environmental Studies Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            CourseId = 10L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9362),
                            Description = "A group for intermediate French language learners.",
                            Name = "Intermediate French Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            CourseId = 11L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9364),
                            Description = "A group focusing on advanced algebraic concepts and problem-solving techniques.",
                            Name = "Advanced Algebra Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12L,
                            CourseId = 12L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9366),
                            Description = "A group studying the cellular structure, function, and processes.",
                            Name = "Cell Biology Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13L,
                            CourseId = 13L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9368),
                            Description = "A group focusing on practicing conversational Russian language skills.",
                            Name = "Russian Language Conversation Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14L,
                            CourseId = 14L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9370),
                            Description = "A group studying the works of William Shakespeare and Elizabethan literature.",
                            Name = "Shakespearean Literature Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15L,
                            CourseId = 15L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9372),
                            Description = "A group exploring ancient civilizations, cultures, and historical events.",
                            Name = "Ancient History Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16L,
                            CourseId = 16L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9374),
                            Description = "A group focusing on advanced algorithms and problem-solving strategies.",
                            Name = "Advanced Algorithms Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17L,
                            CourseId = 17L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9376),
                            Description = "A group studying volcanoes, volcanic processes, and volcanic hazards.",
                            Name = "Volcanology Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18L,
                            CourseId = 18L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9379),
                            Description = "A group focusing on network security principles, protocols, and practices.",
                            Name = "Network Security Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19L,
                            CourseId = 19L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9381),
                            Description = "A group studying chemical engineering process design and optimization.",
                            Name = "Process Design Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20L,
                            CourseId = 20L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9382),
                            Description = "A group focusing on team sports and cooperative gameplay.",
                            Name = "Team Sports Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21L,
                            CourseId = 11L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9384),
                            Description = "A group studying abstract algebraic structures and their properties.",
                            Name = "Abstract Algebra Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22L,
                            CourseId = 12L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9386),
                            Description = "A group focusing on the study of genes, heredity, and genetic variation.",
                            Name = "Genetics Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23L,
                            CourseId = 13L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9388),
                            Description = "A group for advanced learners focusing on complex aspects of Russian language and literature.",
                            Name = "Advanced Russian Language Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24L,
                            CourseId = 14L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9391),
                            Description = "A group studying modern literary works and contemporary authors.",
                            Name = "Modern Literature Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25L,
                            CourseId = 15L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9393),
                            Description = "A group focusing on art and artists from the Renaissance period.",
                            Name = "Renaissance Art Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26L,
                            CourseId = 16L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9395),
                            Description = "A group studying machine learning algorithms and applications.",
                            Name = "Machine Learning Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27L,
                            CourseId = 17L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9397),
                            Description = "A group studying fossils, ancient life forms, and prehistoric ecosystems.",
                            Name = "Paleontology Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28L,
                            CourseId = 18L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9399),
                            Description = "A group focusing on cybersecurity practices, threats, and defenses.",
                            Name = "Cybersecurity Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29L,
                            CourseId = 19L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9401),
                            Description = "A group studying optimization techniques for chemical processes.",
                            Name = "Chemical Process Optimization Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30L,
                            CourseId = 20L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9403),
                            Description = "A group focusing on yoga, meditation, and mindfulness practices.",
                            Name = "Yoga and Meditation Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31L,
                            CourseId = 21L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9404),
                            Description = "A group focusing on yoga, meditation, and mindfulness practices.",
                            Name = "Yoga and Meditation Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32L,
                            CourseId = 15L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9406),
                            Description = "A group focusing on yoga, meditation, and mindfulness practices.",
                            Name = "Yoga and Meditation Group",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Homework", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Deadline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Homeworks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9657),
                            Deadline = "23:59:59",
                            Description = "Complete the exercises on basic English grammar concepts covered in the lesson.",
                            LessonId = 1L,
                            Title = "Practice Exercise 1",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9663),
                            Deadline = "23:59:59",
                            Description = "Write a short paragraph applying the grammar rules discussed in class.",
                            LessonId = 1L,
                            Title = "Writing Assignment",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9665),
                            Deadline = "23:59:59",
                            Description = "Write a Java program that demonstrates the use of variables and different data types.",
                            LessonId = 2L,
                            Title = "Code Exercise: Variables and Data Types",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9667),
                            Deadline = "23:59:59",
                            Description = "Solve the programming problems provided and submit your solutions.",
                            LessonId = 2L,
                            Title = "Problem-solving Exercise",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9669),
                            Deadline = "23:59:59",
                            Description = "Take photographs applying the composition techniques discussed in class.",
                            LessonId = 3L,
                            Title = "Photo Composition Project",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9673),
                            Deadline = "23:59:59",
                            Description = "Edit the provided photographs using editing software and submit your edited versions.",
                            LessonId = 3L,
                            Title = "Editing Exercise",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9675),
                            Deadline = "23:59:59",
                            Description = "Solve the algebraic problems provided and submit your solutions.",
                            LessonId = 4L,
                            Title = "Problem-solving Assignment",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9677),
                            Deadline = "23:59:59",
                            Description = "Practice solving algebraic equations of different types.",
                            LessonId = 4L,
                            Title = "Algebraic Equations Exercise",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9679),
                            Deadline = "23:59:59",
                            Description = "Analyze a Renaissance artwork of your choice and write an essay.",
                            LessonId = 5L,
                            Title = "Art Analysis Project",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9686),
                            Deadline = "23:59:59",
                            Description = "Reproduce a famous Renaissance artwork using your preferred medium.",
                            LessonId = 5L,
                            Title = "Artwork Reproduction",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9688),
                            Deadline = "23:59:59",
                            Description = "Reproduce a famous Renaissance artwork using your preferred medium.",
                            LessonId = 8L,
                            Title = "Artwork Reproduction",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9690),
                            Deadline = "23:59:59",
                            Description = "Reproduce a famous Renaissance artwork using your preferred medium.",
                            LessonId = 8L,
                            Title = "Artwork Reproduction",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Lessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9514),
                            Description = "An introductory lesson covering basic English grammar concepts.",
                            EndDate = "10:00",
                            GroupId = 1L,
                            StartDate = "9:00",
                            TeacherId = 1L,
                            Title = "Introduction to English Grammar",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9519),
                            Description = "A beginner-level lesson introducing fundamental Java programming concepts.",
                            EndDate = "10:00",
                            GroupId = 2L,
                            StartDate = "9:00",
                            TeacherId = 2L,
                            Title = "Introduction to Java Programming",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9522),
                            Description = "An introductory lesson covering basic photography techniques and principles.",
                            EndDate = "10:00",
                            GroupId = 3L,
                            StartDate = "9:00",
                            TeacherId = 3L,
                            Title = "Introduction to Photography",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9524),
                            Description = "A lesson focusing on intermediate-level algebraic concepts and problem-solving techniques.",
                            EndDate = "10:00",
                            GroupId = 4L,
                            StartDate = "9:00",
                            TeacherId = 4L,
                            Title = "Intermediate Mathematics: Algebra",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9526),
                            Description = "A lesson introducing Renaissance art and its historical significance.",
                            EndDate = "10:00",
                            GroupId = 5L,
                            StartDate = "9:00",
                            TeacherId = 5L,
                            Title = "Renaissance Art: Introduction",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9530),
                            Description = "An advanced lesson covering quantum mechanics and its applications.",
                            EndDate = "10:00",
                            GroupId = 6L,
                            StartDate = "9:00",
                            TeacherId = 6L,
                            Title = "Advanced Physics: Quantum Mechanics",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9533),
                            Description = "A beginner-level lesson introducing piano playing techniques and music theory.",
                            EndDate = "10:00",
                            GroupId = 7L,
                            StartDate = "9:00",
                            TeacherId = 7L,
                            Title = "Instrumental Music: Introduction to Piano",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9535),
                            Description = "An introductory lesson covering basic organic chemistry principles and reactions.",
                            EndDate = "10:00",
                            GroupId = 8L,
                            StartDate = "9:00",
                            TeacherId = 8L,
                            Title = "Organic Chemistry: Introduction",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9538),
                            Description = "A lesson exploring ancient civilizations and their contributions to world history.",
                            EndDate = "10:00",
                            GroupId = 9L,
                            StartDate = "9:00",
                            TeacherId = 9L,
                            Title = "World History: Ancient Civilizations",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9541),
                            Description = "An introductory lesson covering basic graphic design principles and software tools.",
                            EndDate = "10:00",
                            GroupId = 10L,
                            StartDate = "9:00",
                            TeacherId = 10L,
                            Title = "Introduction to Graphic Design",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9543),
                            Description = "A beginner-level lesson introducing basic web development concepts and technologies.",
                            EndDate = "10:00",
                            GroupId = 11L,
                            StartDate = "9:00",
                            TeacherId = 11L,
                            Title = "Introduction to Web Development",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9545),
                            Description = "A beginner-level lesson introducing basic web development concepts and technologies.",
                            EndDate = "10:00",
                            GroupId = 12L,
                            StartDate = "9:00",
                            TeacherId = 12L,
                            Title = "Introduction to Web Development",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9548),
                            Description = "A beginner-level lesson introducing basic web development concepts and technologies.",
                            EndDate = "10:00",
                            GroupId = 13L,
                            StartDate = "9:00",
                            TeacherId = 13L,
                            Title = "Introduction to Web Development",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LessonAttendanceType")
                        .HasColumnType("integer");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonAttendances", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Classroom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeacherId");

                    b.ToTable("LessonTables", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.ParentStudent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ParentStudents", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Difficulty")
                        .HasColumnType("smallint");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Questiones");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.School", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CallCenter")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<long>("DirectorId")
                        .HasColumnType("bigint");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmailCenter")
                        .HasColumnType("text");

                    b.Property<string>("GeneralAddressMFY")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<long?>("SchoolLogoAssetId")
                        .HasColumnType("bigint");

                    b.Property<byte>("SchoolType")
                        .HasColumnType("smallint");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("SuperAdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("Schools", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CallCenter = "+998900000001",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8984),
                            Description = "Xalqaro standartlarga asoslangan innovatsion ta'lim muassasasi",
                            DirectorId = 1L,
                            DistrictName = "Mirzo Ulug'bek",
                            EmailCenter = "TXM@school.com",
                            GeneralAddressMFY = "Uch Qahramon MFY",
                            Name = "Inter-Nation",
                            Region = 2,
                            SchoolType = (byte)3,
                            StreetName = "Bog'ishamol ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "TXM.com"
                        },
                        new
                        {
                            Id = 2L,
                            CallCenter = "+998900000002",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8991),
                            Description = "Ingliz olami",
                            DirectorId = 2L,
                            DistrictName = "Eskishahar",
                            EmailCenter = "STI@school.com",
                            GeneralAddressMFY = "Xo'ja Ahror Vali MFY",
                            Name = "Cambridge Edu",
                            Region = 11,
                            SchoolType = (byte)3,
                            StreetName = "Registon ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "STI.com"
                        },
                        new
                        {
                            Id = 3L,
                            CallCenter = "+998900000003",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8995),
                            Description = "Pedagogika sohasida yuqori malakali mutaxassislar tayyorlaydigan oliy ta'lim muassasasi",
                            DirectorId = 3L,
                            DistrictName = "Shahriston",
                            EmailCenter = "API@school.com",
                            GeneralAddressMFY = "Pedagogika instituti",
                            Name = "Andijon Pedagogika Instituti",
                            Region = 3,
                            SchoolType = (byte)3,
                            StreetName = "Pedagogika ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "API.com"
                        },
                        new
                        {
                            Id = 4L,
                            CallCenter = "+998900000004",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8998),
                            Description = "Oliy ta'lim sohasida yuqori malakali mutaxassislar tayyorlaydigan davlat universiteti",
                            DirectorId = 4L,
                            DistrictName = "Namangan shahri",
                            EmailCenter = "NDU@school.com",
                            GeneralAddressMFY = "Universitet",
                            Name = "Namangan Davlat Universiteti",
                            Region = 4,
                            SchoolType = (byte)3,
                            StreetName = "Universitet ko'chasi",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "NDU.com"
                        },
                        new
                        {
                            Id = 5L,
                            CallCenter = "+998900000013",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9001),
                            Description = "Center providing language training services.",
                            DirectorId = 3L,
                            DistrictName = "Yunusabad",
                            EmailCenter = "info@tltraining.com",
                            GeneralAddressMFY = "Language Training Center",
                            Name = "Tashkent Language Training Center",
                            Region = 1,
                            SchoolType = (byte)3,
                            StreetName = "Language Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://tltraining.com"
                        },
                        new
                        {
                            Id = 6L,
                            CallCenter = "+998900000014",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9005),
                            Description = "Center offering computer training courses.",
                            DirectorId = 4L,
                            DistrictName = "Samarqand shahri",
                            EmailCenter = "info@sctc.uz",
                            GeneralAddressMFY = "Computer Training Center",
                            Name = "Samarkand Computer Training Center",
                            Region = 11,
                            SchoolType = (byte)3,
                            StreetName = "Computer Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sctc.uz"
                        },
                        new
                        {
                            Id = 7L,
                            CallCenter = "+998900000015",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9008),
                            Description = "Fitness center offering various training programs.",
                            DirectorId = 1L,
                            DistrictName = "Navoiy shahri",
                            EmailCenter = "info@navfit.com",
                            GeneralAddressMFY = "Fitness Training Center",
                            Name = "Navoiy Fitness Training Center",
                            Region = 9,
                            SchoolType = (byte)3,
                            StreetName = "Fitness Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://navfit.com"
                        },
                        new
                        {
                            Id = 8L,
                            CallCenter = "+998900000016",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9011),
                            Description = "Center specializing in photography training.",
                            DirectorId = 2L,
                            DistrictName = "Termiz shahri",
                            EmailCenter = "info@sptc.uz",
                            GeneralAddressMFY = "Photography Training Center",
                            Name = "Surxondaryo Photography Training Center",
                            Region = 12,
                            SchoolType = (byte)3,
                            StreetName = "Photography Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sptc.uz"
                        },
                        new
                        {
                            Id = 9L,
                            CallCenter = "+998900000017",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9014),
                            Description = "Center providing language training services.",
                            DirectorId = 3L,
                            DistrictName = "Yunusabad",
                            EmailCenter = "info@tltraining.com",
                            GeneralAddressMFY = "Yunusabad MFY",
                            Name = "Tashkent Language Training Center",
                            Region = 1,
                            SchoolType = (byte)3,
                            StreetName = "Mustaqillik Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://tltraining.com"
                        },
                        new
                        {
                            Id = 10L,
                            CallCenter = "+998900000018",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9017),
                            Description = "Center offering computer training courses.",
                            DirectorId = 4L,
                            DistrictName = "Samarqand shahri",
                            EmailCenter = "info@sctc.uz",
                            GeneralAddressMFY = "Samarqand MFY",
                            Name = "Samarkand Computer Training Center",
                            Region = 11,
                            SchoolType = (byte)2,
                            StreetName = "Amir Temur Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sctc.uz"
                        },
                        new
                        {
                            Id = 11L,
                            CallCenter = "+998900000019",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9020),
                            Description = "Fitness center offering various training programs.",
                            DirectorId = 1L,
                            DistrictName = "Navoiy shahri",
                            EmailCenter = "info@navfit.com",
                            GeneralAddressMFY = "Navoiy MFY",
                            Name = "Navoiy Fitness Training Center",
                            Region = 9,
                            SchoolType = (byte)4,
                            StreetName = "Olmazor Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://navfit.com"
                        },
                        new
                        {
                            Id = 12L,
                            CallCenter = "+998900000020",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9023),
                            Description = "Center specializing in photography training.",
                            DirectorId = 5L,
                            DistrictName = "Termiz shahri",
                            EmailCenter = "info@sptc.uz",
                            GeneralAddressMFY = "Termiz MFY",
                            Name = "Surxondaryo Photography Training Center",
                            Region = 12,
                            SchoolType = (byte)3,
                            StreetName = "Shaxrisabz Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sptc.uz"
                        },
                        new
                        {
                            Id = 13L,
                            CallCenter = "+998900000021",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9026),
                            Description = "Center specializing in photography training.",
                            DirectorId = 5L,
                            DistrictName = "Termiz shahri",
                            EmailCenter = "info@sptc.uz",
                            GeneralAddressMFY = "Termiz MFY",
                            Name = "Surxondaryo Photography Training Center",
                            Region = 12,
                            SchoolType = (byte)3,
                            StreetName = "Shaxrisabz Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Website = "https://sptc.uz"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.StudentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroups", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<long>("LessonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.TeacherGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Role")
                        .HasColumnType("smallint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9831),
                            GroupId = 1L,
                            Role = (byte)3,
                            TeacherId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9838),
                            GroupId = 2L,
                            Role = (byte)3,
                            TeacherId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9840),
                            GroupId = 3L,
                            Role = (byte)3,
                            TeacherId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9842),
                            GroupId = 4L,
                            Role = (byte)3,
                            TeacherId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9844),
                            GroupId = 5L,
                            Role = (byte)3,
                            TeacherId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9849),
                            GroupId = 6L,
                            Role = (byte)3,
                            TeacherId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9850),
                            GroupId = 7L,
                            Role = (byte)3,
                            TeacherId = 4L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9852),
                            GroupId = 8L,
                            Role = (byte)3,
                            TeacherId = 5L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9855),
                            GroupId = 9L,
                            Role = (byte)3,
                            TeacherId = 6L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9857),
                            GroupId = 10L,
                            Role = (byte)3,
                            TeacherId = 7L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9859),
                            GroupId = 11L,
                            Role = (byte)3,
                            TeacherId = 8L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9861),
                            GroupId = 12L,
                            Role = (byte)3,
                            TeacherId = 9L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9863),
                            GroupId = 13L,
                            Role = (byte)3,
                            TeacherId = 10L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9865),
                            GroupId = 14L,
                            Role = (byte)3,
                            TeacherId = 11L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9867),
                            GroupId = 15L,
                            Role = (byte)3,
                            TeacherId = 12L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9869),
                            GroupId = 16L,
                            Role = (byte)3,
                            TeacherId = 13L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9870),
                            GroupId = 17L,
                            Role = (byte)3,
                            TeacherId = 14L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9873),
                            GroupId = 18L,
                            Role = (byte)3,
                            TeacherId = 15L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9875),
                            GroupId = 19L,
                            Role = (byte)3,
                            TeacherId = 16L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9877),
                            GroupId = 20L,
                            Role = (byte)3,
                            TeacherId = 17L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9879),
                            GroupId = 21L,
                            Role = (byte)3,
                            TeacherId = 18L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9881),
                            GroupId = 22L,
                            Role = (byte)3,
                            TeacherId = 19L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9882),
                            GroupId = 23L,
                            Role = (byte)3,
                            TeacherId = 20L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9884),
                            GroupId = 24L,
                            Role = (byte)3,
                            TeacherId = 21L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(9885),
                            GroupId = 25L,
                            Role = (byte)3,
                            TeacherId = 22L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PassportSeria")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<long>("SchoolId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SuperAdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8455),
                            Email = "johndoe@admin1.com",
                            FirstName = "John",
                            Gender = (byte)1,
                            LastName = "Doe",
                            PassportSeria = "AB123456",
                            Password = "hashed_password",
                            SchoolId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8460),
                            Email = "janesmith@admin2.com",
                            FirstName = "Jane",
                            Gender = (byte)2,
                            LastName = "Smith",
                            PassportSeria = "CD789012",
                            Password = "hashed_password",
                            SchoolId = 1L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school1"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8464),
                            Email = "michaeljohnson@admin1.com",
                            FirstName = "Michael",
                            Gender = (byte)1,
                            LastName = "Johnson",
                            PassportSeria = "EF345678",
                            Password = "hashed_password",
                            SchoolId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school2"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8467),
                            Email = "emmadavis@admin2.com",
                            FirstName = "Emma",
                            Gender = (byte)2,
                            LastName = "Davis",
                            PassportSeria = "GH901234",
                            Password = "hashed_password",
                            SchoolId = 2L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school2"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8470),
                            Email = "williambrown@admin1.com",
                            FirstName = "William",
                            Gender = (byte)1,
                            LastName = "Brown",
                            PassportSeria = "IJ567890",
                            Password = "hashed_password",
                            SchoolId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school3"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8473),
                            Email = "oliviataylor@admin2.com",
                            FirstName = "Olivia",
                            Gender = (byte)2,
                            LastName = "Taylor",
                            PassportSeria = "KL123456",
                            Password = "hashed_password",
                            SchoolId = 3L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school3"
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8476),
                            Email = "davidwilson@admin1.com",
                            FirstName = "David",
                            Gender = (byte)1,
                            LastName = "Wilson",
                            PassportSeria = "MN789012",
                            Password = "hashed_password",
                            SchoolId = 4L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school4"
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8479),
                            Email = "sophiamartinez@admin2.com",
                            FirstName = "Sophia",
                            Gender = (byte)2,
                            LastName = "Martinez",
                            PassportSeria = "OP345678",
                            Password = "hashed_password",
                            SchoolId = 4L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school4"
                        },
                        new
                        {
                            Id = 9L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8481),
                            Email = "jamesanderson@admin1.com",
                            FirstName = "James",
                            Gender = (byte)1,
                            LastName = "Anderson",
                            PassportSeria = "QR901234",
                            Password = "hashed_password",
                            SchoolId = 5L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school5"
                        },
                        new
                        {
                            Id = 10L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8485),
                            Email = "avahernandez@admin2.com",
                            FirstName = "Ava",
                            Gender = (byte)2,
                            LastName = "Hernandez",
                            PassportSeria = "ST567890",
                            Password = "hashed_password",
                            SchoolId = 5L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school5"
                        },
                        new
                        {
                            Id = 11L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8488),
                            Email = "benjaminyoung@admin1.com",
                            FirstName = "Benjamin",
                            Gender = (byte)1,
                            LastName = "Young",
                            PassportSeria = "UV123456",
                            Password = "hashed_password",
                            SchoolId = 6L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school6"
                        },
                        new
                        {
                            Id = 12L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8491),
                            Email = "mialopez@admin2.com",
                            FirstName = "Mia",
                            Gender = (byte)2,
                            LastName = "Lopez",
                            PassportSeria = "WX789012",
                            Password = "hashed_password",
                            SchoolId = 6L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school6"
                        },
                        new
                        {
                            Id = 13L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8493),
                            Email = "danielgonzalez@admin1.com",
                            FirstName = "Daniel",
                            Gender = (byte)1,
                            LastName = "Gonzalez",
                            PassportSeria = "YZ345678",
                            Password = "hashed_password",
                            SchoolId = 7L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school7"
                        },
                        new
                        {
                            Id = 14L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8496),
                            Email = "isabellaperez@admin2.com",
                            FirstName = "Isabella",
                            Gender = (byte)2,
                            LastName = "Perez",
                            PassportSeria = "AB901234",
                            Password = "hashed_password",
                            SchoolId = 7L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school7"
                        },
                        new
                        {
                            Id = 15L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8498),
                            Email = "islom.karimov@admin1.com",
                            FirstName = "Islom",
                            Gender = (byte)1,
                            LastName = "Karimov",
                            PassportSeria = "MN567890",
                            Password = "hashed_password",
                            SchoolId = 8L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school4"
                        },
                        new
                        {
                            Id = 17L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8500),
                            Email = "ethanmoore@admin1.com",
                            FirstName = "Ethan",
                            Gender = (byte)1,
                            LastName = "Moore",
                            PassportSeria = "CD901234",
                            Password = "hashed_password",
                            SchoolId = 9L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school9"
                        },
                        new
                        {
                            Id = 19L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8503),
                            Email = "alexanderscott@admin1.com",
                            FirstName = "Alexander",
                            Gender = (byte)1,
                            LastName = "Scott",
                            PassportSeria = "GH123456",
                            Password = "hashed_password",
                            SchoolId = 10L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school10"
                        },
                        new
                        {
                            Id = 20L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8506),
                            Email = "ameliagomez@admin2.com",
                            FirstName = "Amelia",
                            Gender = (byte)2,
                            LastName = "Gomez",
                            PassportSeria = "IJ789012",
                            Password = "hashed_password",
                            SchoolId = 10L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school10"
                        },
                        new
                        {
                            Id = 21L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8509),
                            Email = "henrywright@admin1.com",
                            FirstName = "Henry",
                            Gender = (byte)1,
                            LastName = "Wright",
                            PassportSeria = "KL345678",
                            Password = "hashed_password",
                            SchoolId = 11L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school11"
                        },
                        new
                        {
                            Id = 22L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8511),
                            Email = "sophieflores@admin2.com",
                            FirstName = "Sophie",
                            Gender = (byte)2,
                            LastName = "Flores",
                            PassportSeria = "MN901234",
                            Password = "hashed_password",
                            SchoolId = 11L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school11"
                        },
                        new
                        {
                            Id = 23L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8514),
                            Email = "liamsanchez@admin1.com",
                            FirstName = "Liam",
                            Gender = (byte)1,
                            LastName = "Sanchez",
                            PassportSeria = "OP567890",
                            Password = "hashed_password",
                            SchoolId = 12L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin1_school12"
                        },
                        new
                        {
                            Id = 24L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8516),
                            Email = "gracechang@admin2.com",
                            FirstName = "Grace",
                            Gender = (byte)2,
                            LastName = "Chang",
                            PassportSeria = "QR123456",
                            Password = "hashed_password",
                            SchoolId = 12L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin2_school12"
                        },
                        new
                        {
                            Id = 25L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8518),
                            Email = "cmwp@admin2.com",
                            FirstName = "mps",
                            Gender = (byte)2,
                            LastName = "cmwp",
                            PassportSeria = "QR123456",
                            Password = "hashed_password",
                            SchoolId = 13L,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin3_school12"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Director", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PassportSeria")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SuperAdminId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("SuperAdminId");

                    b.ToTable("Directors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8635),
                            Email = "olimjon.torayev@director.com",
                            FirstName = "Olimjon",
                            Gender = (byte)1,
                            LastName = "To'rayev",
                            PassportSeria = "AB123456",
                            Password = "hashed_password",
                            PhoneNumber = "+998904567890",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8642),
                            Email = "nodira.xolmirzayeva@director.com",
                            FirstName = "Nodira",
                            Gender = (byte)2,
                            LastName = "Xolmirzayeva",
                            PassportSeria = "CD789012",
                            Password = "hashed_password",
                            PhoneNumber = "+998904567890",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8646),
                            Email = "sarvar.qosimov@director.com",
                            FirstName = "Sarvar",
                            Gender = (byte)1,
                            LastName = "Qosimov",
                            PassportSeria = "EF345678",
                            Password = "hashed_password",
                            PhoneNumber = "+998904567890",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8649),
                            Email = "malika.azizova@director.com",
                            FirstName = "Malika",
                            Gender = (byte)2,
                            LastName = "Azizova",
                            PassportSeria = "GH567890",
                            Password = "hashed_password",
                            PhoneNumber = "+998904567890",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8652),
                            Email = "islom.karimov@director.com",
                            FirstName = "Islom",
                            Gender = (byte)1,
                            LastName = "Karimov",
                            PassportSeria = "IJ789012",
                            Password = "hashed_password",
                            PhoneNumber = "+998904567890",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director5"
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8656),
                            Email = "ikcmwopv@director.com",
                            FirstName = "mcpw",
                            Gender = (byte)1,
                            LastName = "cmla",
                            PassportSeria = "IJ785212",
                            Password = "hashed_password",
                            PhoneNumber = "+998904567890",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "director5"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Parent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("GeneralAddressMFY")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("HouseNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("GeneralAddressMFY")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("HouseNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StudentUniqueId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("genderType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.SuperAdmin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<byte>("Gender")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PassportSeria")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8281),
                            Email = "shahnozaodilova@gmail.com",
                            FirstName = "Shahnoza",
                            Gender = (byte)2,
                            LastName = "Odilova",
                            PassportSeria = "AB123456",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8311),
                            Email = "moxi05@gmail.com",
                            FirstName = "Moxinur",
                            Gender = (byte)2,
                            LastName = "Zokirova",
                            PassportSeria = "CD789012",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8315),
                            Email = "akbarov@gmail.com",
                            FirstName = "Muhammadjon",
                            Gender = (byte)1,
                            LastName = "Akbarov",
                            PassportSeria = "AB123458",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8318),
                            Email = "ruxshona0@gmail.com",
                            FirstName = "Ruxshona",
                            Gender = (byte)2,
                            LastName = "Nodirova",
                            PassportSeria = "CD789013",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8321),
                            Email = "kimdir@gmail.com",
                            FirstName = "Kimdir",
                            Gender = (byte)2,
                            LastName = "Bilmiman",
                            PassportSeria = "CD789014",
                            Password = "hashed_password",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "superadmin4"
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("GeneralAddressMFY")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("HouseNumber")
                        .HasColumnType("smallint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<byte>("ScienceType")
                        .HasColumnType("smallint");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("TeacherAssetId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte>("genderType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Teachers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Biography = "Experienced teacher in mathematics.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8770),
                            DateOfBirth = "1985.5.15",
                            DistrictName = "Mirzo Ulug'bek",
                            Email = "johnsmith@school.com",
                            FirstName = "John",
                            GeneralAddressMFY = "Main Street",
                            HouseNumber = (short)12,
                            LastName = "Smith",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000001",
                            Region = 1,
                            ScienceType = (byte)13,
                            StreetName = "Oak Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "johnny",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 2L,
                            Biography = "Passionate teacher specializing in history.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8780),
                            DateOfBirth = "1988.8.25",
                            DistrictName = "Andijan City",
                            Email = "janedoe@school.com",
                            FirstName = "Jane",
                            GeneralAddressMFY = "Downtown",
                            HouseNumber = (short)20,
                            LastName = "Doe",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000002",
                            Region = 3,
                            ScienceType = (byte)4,
                            StreetName = "Maple Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "janedoe",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 3L,
                            Biography = "Dedicated teacher with expertise in geography.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8784),
                            DateOfBirth = "1980.1.10",
                            DistrictName = "Fergana City",
                            Email = "michaeljohnson@school.com",
                            FirstName = "Michael",
                            GeneralAddressMFY = "Central Avenue",
                            HouseNumber = (short)8,
                            LastName = "Johnson",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000003",
                            Region = 5,
                            ScienceType = (byte)19,
                            StreetName = "Pine Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "michaelj",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 4L,
                            Biography = "Experienced Mathematics teacher with 10+ years of experience.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8789),
                            DateOfBirth = "1980.1.1",
                            DistrictName = "Samarkand City",
                            Email = "umid.yoldoshev@school1.com",
                            FirstName = "Umid",
                            GeneralAddressMFY = "Broadway",
                            HouseNumber = (short)15,
                            LastName = "Yo'ldoshev",
                            Password = "hashed_password",
                            PhoneNumber = "+998901234567",
                            Region = 11,
                            ScienceType = (byte)13,
                            StreetName = "Cedar Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "umid.y",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 5L,
                            Biography = "Enthusiastic teacher with a passion for English language learning.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8793),
                            DateOfBirth = "1990.2.1",
                            DistrictName = "Namangan City",
                            Email = "sarabrown@school.com",
                            FirstName = "Sara",
                            GeneralAddressMFY = "Park Avenue",
                            HouseNumber = (short)24,
                            LastName = "Brown",
                            Password = "hashed_password",
                            PhoneNumber = "+998904567890",
                            Region = 4,
                            ScienceType = (byte)11,
                            StreetName = "Elm Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "sara.b",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 6L,
                            Biography = "Highly qualified teacher for Korean language courses.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8797),
                            DateOfBirth = "1987.12.31",
                            DistrictName = "Yangihayot",
                            Email = "kimhan@school.com",
                            FirstName = "Kim",
                            GeneralAddressMFY = "University District",
                            HouseNumber = (short)30,
                            LastName = "Han",
                            Password = "hashed_password",
                            PhoneNumber = "+998908901234",
                            Region = 2,
                            ScienceType = (byte)7,
                            StreetName = "Willow Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "kim.h",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 7L,
                            Biography = "Experienced teacher for Spanish language courses.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8800),
                            DateOfBirth = "1978.9.22",
                            DistrictName = "Termez",
                            Email = "petergarcia@school.com",
                            FirstName = "Peter",
                            GeneralAddressMFY = "Old Town",
                            HouseNumber = (short)18,
                            LastName = "Garcia",
                            Password = "hashed_password",
                            PhoneNumber = "+998907890123",
                            Region = 12,
                            ScienceType = (byte)7,
                            StreetName = "Birch Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "peter.g",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 8L,
                            Biography = "Dedicated teacher for Russian language instruction.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8811),
                            DateOfBirth = "1982.6.14",
                            DistrictName = "Navoiy City",
                            Email = "alexeivolkov@school.com",
                            FirstName = "Alexei",
                            GeneralAddressMFY = "Industrial District",
                            HouseNumber = (short)42,
                            LastName = "Volkov",
                            Password = "hashed_password",
                            PhoneNumber = "+998909876543",
                            Region = 9,
                            ScienceType = (byte)10,
                            StreetName = "Poplar Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "alexei.v",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 9L,
                            Biography = "Skilled teacher specializing in Uzbek language and literature.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8815),
                            DateOfBirth = "1992.3.8",
                            DistrictName = "Karshi City",
                            Email = "fatima.abdullayeva@school.com",
                            FirstName = "Fatima",
                            GeneralAddressMFY = "City Center",
                            HouseNumber = (short)55,
                            LastName = "Abdullayeva",
                            Password = "hashed_password",
                            PhoneNumber = "+998901239876",
                            Region = 8,
                            ScienceType = (byte)6,
                            StreetName = "Ash Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "fatima.a",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 10L,
                            Biography = "Energetic teacher with a passion for French language and culture.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8819),
                            DateOfBirth = "1989.11.17",
                            DistrictName = "Jizzakh City",
                            Email = "emmanuelblanc@school.com",
                            FirstName = "Emmanuel",
                            GeneralAddressMFY = "New City",
                            HouseNumber = (short)37,
                            LastName = "Blanc",
                            Password = "hashed_password",
                            PhoneNumber = "+998905678901",
                            Region = 7,
                            ScienceType = (byte)9,
                            StreetName = "Beech Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "emmanuel.b",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 11L,
                            Biography = "Enthusiastic teacher dedicated to Biology education.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8823),
                            DateOfBirth = "1995.7.10",
                            DistrictName = "Gulistan",
                            Email = "ayeshakhan@school.com",
                            FirstName = "Ayesha",
                            GeneralAddressMFY = "University Area",
                            HouseNumber = (short)11,
                            LastName = "Khan",
                            Password = "hashed_password",
                            PhoneNumber = "+998902345678",
                            Region = 13,
                            ScienceType = (byte)17,
                            StreetName = "Maple Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "ayesha.k",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 12L,
                            Biography = "Experienced teacher for Chemistry courses.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8827),
                            DateOfBirth = "1983.4.25",
                            DistrictName = "Khiva",
                            Email = "davidlee@school.com",
                            FirstName = "David",
                            GeneralAddressMFY = "Historic Center",
                            HouseNumber = (short)29,
                            LastName = "Lee",
                            Password = "hashed_password",
                            PhoneNumber = "+9989098765432",
                            Region = 14,
                            ScienceType = (byte)18,
                            StreetName = "Elm Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "david.l",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 13L,
                            Biography = "Skilled teacher for Physics instruction.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8830),
                            DateOfBirth = "1990.10.21",
                            DistrictName = "Shahrisabz",
                            Email = "mariagarcia@school.com",
                            FirstName = "Maria",
                            GeneralAddressMFY = "Old Town",
                            HouseNumber = (short)61,
                            LastName = "Garcia",
                            Password = "hashed_password",
                            PhoneNumber = "+9989087654321",
                            Region = 8,
                            ScienceType = (byte)16,
                            StreetName = "Birch Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "maria.g",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 14L,
                            Biography = "Dedicated teacher passionate about World History.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8834),
                            DateOfBirth = "1986.5.12",
                            DistrictName = "Bukhara City",
                            Email = "omarsyed@school.com",
                            FirstName = "Omar",
                            GeneralAddressMFY = "City Center",
                            HouseNumber = (short)74,
                            LastName = "Syed",
                            Password = "hashed_password",
                            PhoneNumber = "+998906789012",
                            Region = 6,
                            ScienceType = (byte)4,
                            StreetName = "Ash Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "omar.s",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 15L,
                            Biography = "Skilled Uzbek language teacher passionate about preserving cultural heritage.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8837),
                            DateOfBirth = "2000.2.29",
                            DistrictName = "Namangan City",
                            Email = "malika.azizova@school4.com",
                            FirstName = "Malika",
                            GeneralAddressMFY = "North Street",
                            HouseNumber = (short)28,
                            LastName = "Azizova",
                            Password = "hashed_password",
                            PhoneNumber = "+998901239876",
                            Region = 4,
                            ScienceType = (byte)6,
                            StreetName = "Maple Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "malika.a",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 16L,
                            Biography = "Experienced teacher specializing in geography.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8841),
                            DateOfBirth = "1994.6.29",
                            DistrictName = "Bukhara City",
                            Email = "emmaperez@school.com",
                            FirstName = "Emma",
                            GeneralAddressMFY = "West Street",
                            HouseNumber = (short)5,
                            LastName = "Perez",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000016",
                            Region = 6,
                            ScienceType = (byte)19,
                            StreetName = "Elm Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "emmap",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 17L,
                            Biography = "Passionate teacher with expertise in biology.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8844),
                            DateOfBirth = "1992.8.16",
                            DistrictName = "Khiva",
                            Email = "lucasnguyen@school.com",
                            FirstName = "Lucas",
                            GeneralAddressMFY = "South Street",
                            HouseNumber = (short)10,
                            LastName = "Nguyen",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000017",
                            Region = 14,
                            ScienceType = (byte)17,
                            StreetName = "Willow Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "lucas.n",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 18L,
                            Biography = "Dedicated teacher with a passion for music.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8849),
                            DateOfBirth = "1993.10.4",
                            DistrictName = "Chilonzor",
                            Email = "lilygonzalez@school.com",
                            FirstName = "Lily",
                            GeneralAddressMFY = "East Street",
                            HouseNumber = (short)20,
                            LastName = "Gonzalez",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000018",
                            Region = 2,
                            ScienceType = (byte)2,
                            StreetName = "Poplar Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "lily.g",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 19L,
                            Biography = "Experienced mathematics teacher.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8852),
                            DateOfBirth = "1993.10.4",
                            DistrictName = "Andijan City",
                            Email = "jacksonadams@school.com",
                            FirstName = "Jackson",
                            GeneralAddressMFY = "Central Street",
                            HouseNumber = (short)36,
                            LastName = "Adams",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000019",
                            Region = 3,
                            ScienceType = (byte)13,
                            StreetName = "Birch Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "jackson.a",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 20L,
                            Biography = "Experienced teacher with a strong background in Literature.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8855),
                            DateOfBirth = "1975.12.24",
                            DistrictName = "Denau",
                            Email = "elenapetrova@school.com",
                            FirstName = "Elena",
                            GeneralAddressMFY = "Central District",
                            HouseNumber = (short)9,
                            LastName = "Petrova",
                            Password = "hashed_password",
                            PhoneNumber = "+998903456789",
                            Region = 12,
                            ScienceType = (byte)5,
                            StreetName = "Oak Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "elena.p",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 21L,
                            Biography = "Enthusiastic teacher specializing in Information Technology.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8858),
                            DateOfBirth = "1988.3.3",
                            DistrictName = "Namangan City",
                            Email = "ibrahimaliyev@school.com",
                            FirstName = "Ibrahim",
                            GeneralAddressMFY = "Eastern District",
                            HouseNumber = (short)46,
                            LastName = "Aliyev",
                            Password = "hashed_password",
                            PhoneNumber = "+9989098765431",
                            Region = 4,
                            ScienceType = (byte)21,
                            StreetName = "Willow Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "ibrahim.a",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 22L,
                            Biography = "Dedicated teacher passionate about teaching Algebra.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8861),
                            DateOfBirth = "1991.8.19",
                            DistrictName = "Fergana City",
                            Email = "dilshodrakhmatov@school.com",
                            FirstName = "Dilshod",
                            GeneralAddressMFY = "Western District",
                            HouseNumber = (short)23,
                            LastName = "Rakhmatov",
                            Password = "hashed_password",
                            PhoneNumber = "+9989087654320",
                            Region = 5,
                            ScienceType = (byte)13,
                            StreetName = "Maple Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "dilshod.r",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 23L,
                            Biography = "Skilled teacher for Russin language courses.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8865),
                            DateOfBirth = "1994.1.7",
                            DistrictName = "Uchteppa",
                            Email = "chloewang@school.com",
                            FirstName = "Chloe",
                            GeneralAddressMFY = "University District",
                            HouseNumber = (short)82,
                            LastName = "Wang",
                            Password = "hashed_password",
                            PhoneNumber = "+9989078901234",
                            Region = 1,
                            ScienceType = (byte)10,
                            StreetName = "Birch Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "chloe.w",
                            genderType = (byte)2
                        },
                        new
                        {
                            Id = 24L,
                            Biography = "Experienced teacher with a strong background in Islamic Studies.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8868),
                            DateOfBirth = "1982.9.14",
                            DistrictName = "Samarkand City",
                            Email = "alimohammed@school.com",
                            FirstName = "Ali",
                            GeneralAddressMFY = "Old City",
                            HouseNumber = (short)100,
                            LastName = "Mohammed",
                            Password = "hashed_password",
                            PhoneNumber = "+9989067890123",
                            Region = 11,
                            ScienceType = (byte)2,
                            StreetName = "Ash Street",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "ali.m",
                            genderType = (byte)1
                        },
                        new
                        {
                            Id = 25L,
                            Biography = "Passionate teacher specializing in information technology.",
                            CreatedAt = new DateTime(2024, 4, 30, 22, 7, 31, 634, DateTimeKind.Utc).AddTicks(8871),
                            DateOfBirth = "1993.10.4",
                            DistrictName = "Samarkand City",
                            Email = "harperthompson@school.com",
                            FirstName = "Harper",
                            GeneralAddressMFY = "East Street",
                            HouseNumber = (short)42,
                            LastName = "Thompson",
                            Password = "hashed_password",
                            PhoneNumber = "+998900000025",
                            Region = 11,
                            ScienceType = (byte)21,
                            StreetName = "Cedar Avenue",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "harper.t",
                            genderType = (byte)2
                        });
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.EventAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Events.Event", "Event")
                        .WithOne("EventAsset")
                        .HasForeignKey("Zeemlin.Domain.Entities.Assets.EventAsset", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.HomeworkAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Homework", "Homework")
                        .WithMany("Assets")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.QuestionAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Questions.Question", "Question")
                        .WithMany("QuestionAssets")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.SchoolAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithMany("Asset")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.SchoolLogoAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithOne("SchoolLogoAsset")
                        .HasForeignKey("Zeemlin.Domain.Entities.Assets.SchoolLogoAsset", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.StudentAward", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.Student", "Student")
                        .WithMany("StudentAwards")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.TeacherAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.Teacher", "Teacher")
                        .WithOne("TeacherAsset")
                        .HasForeignKey("Zeemlin.Domain.Entities.Assets.TeacherAsset", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.TeacherAward", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany("TeacherAwards")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Assets.VideoLessonAsset", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany("VideoLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Course", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Events.EventRegistration", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Events.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Grade", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Group", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Homework", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Homework")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonAttendance", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonAttendances")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.Student", "Student")
                        .WithMany("LessonAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.LessonTable", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.ParentStudent", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.Parent", "Parent")
                        .WithMany("ParentStudents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.Student", "Student")
                        .WithMany("ParentStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Answer", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Questions.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Question", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Questions")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.School", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.Director", "Director")
                        .WithMany("Schools")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.SuperAdmin", null)
                        .WithMany("Schools")
                        .HasForeignKey("SuperAdminId");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.StudentGroup", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Group", "Group")
                        .WithMany("StudentGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.Student", "Student")
                        .WithMany("StudentGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Subject", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Lesson", "Lesson")
                        .WithMany("Subjects")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.TeacherGroup", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Group", "Group")
                        .WithMany("TeacherGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany("TeacherGroups")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Admin", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zeemlin.Domain.Entities.Users.SuperAdmin", null)
                        .WithMany("Admins")
                        .HasForeignKey("SuperAdminId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Director", b =>
                {
                    b.HasOne("Zeemlin.Domain.Entities.Users.SuperAdmin", null)
                        .WithMany("Directors")
                        .HasForeignKey("SuperAdminId");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Course", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("EventAsset");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Group", b =>
                {
                    b.Navigation("StudentGroups");

                    b.Navigation("TeacherGroups");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Homework", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Homework");

                    b.Navigation("LessonAttendances");

                    b.Navigation("Questions");

                    b.Navigation("Subjects");

                    b.Navigation("VideoLessons");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Questions.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionAssets");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.School", b =>
                {
                    b.Navigation("Asset");

                    b.Navigation("Courses");

                    b.Navigation("SchoolLogoAsset");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Director", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Parent", b =>
                {
                    b.Navigation("ParentStudents");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Student", b =>
                {
                    b.Navigation("LessonAttendances");

                    b.Navigation("ParentStudents");

                    b.Navigation("StudentAwards");

                    b.Navigation("StudentGroups");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.SuperAdmin", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Directors");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("Zeemlin.Domain.Entities.Users.Teacher", b =>
                {
                    b.Navigation("TeacherAsset");

                    b.Navigation("TeacherAwards");

                    b.Navigation("TeacherGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
